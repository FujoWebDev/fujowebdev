---
import PageLayout from "../layouts/PageLayout.astro";
import CharacterCard from "../components/CharacterCard.astro";

import { getCollection } from "astro:content";
import { parse } from "marked";
import { Image } from "astro:assets";

const characters = (await getCollection("characters")).toSorted(
  (a, b) => a.data.order - b.data.order
);
---

<PageLayout pageTitle="Our Characters">
  <section>
    <h1>Our characters</h1>
    <div>
      <strong
        ><em>The Fujoshi Guide to Web Development</em> features gijinka (anthropomorphizations)
        of programming languages and concepts.</strong
      > Each of our characters is engineered from the ground up to cater to "transformative"
      fandom—that is, people who create fanfiction, fanart, meta, and much more—and
      their sensibilities and interests.
    </div>
    <ul class="selection">
      {
        characters.map(async (character) => {
          return (
            <li>
              <a href={`#${character.data.name.toLowerCase()}`}>
                <Image
                  src={character.data.icon}
                  alt={`${character.data.name}'s beautiful face'`}
                />
              </a>
            </li>
          );
        })
      }
    </ul>
  </section>
  <section>
    <h2>Localhost</h2>
    <div>
      Localhost is where the characters that reside on your own computer live.
      While GitHub theoretically comes from the Cloud, he's often following Git
      around and (much to Terminal's chagrin) is an almost-permanent fixture of
      the place.
    </div>
    {
      characters
        .filter((c) => c.data.home == "localhost")
        .map(async (character) => {
          const renderedBody = await character.render();
          return (
            <CharacterCard
              name={character.data.name}
              imageSrc={character.data.image}
              likes={character.data.likes}
              dislikes={character.data.dislikes}
              tropes={character.data.tropes}
              trivia={parse(character.data.trivia)}
            >
              <renderedBody.Content />
            </CharacterCard>
          );
        })
    }
  </section>
  <section>
    <h2>Browserland</h2>
    <div>
      Browserland characters are responsible for bringing the web as you know it
      to all users. Always hard at work to display any website in its full
      glory, Browserland's most famous trio (HTML, CSS & ARIA) is inseparable.
    </div>
    {
      characters
        .filter((c) => c.data.home == "browserland")
        .map(async (character) => {
          const renderedBody = await character.render();
          return (
            <CharacterCard
              name={character.data.name}
              imageSrc={character.data.image}
              likes={character.data.likes}
              dislikes={character.data.dislikes}
              tropes={character.data.tropes}
              trivia={parse(character.data.trivia)}
            >
              <renderedBody.Content />
            </CharacterCard>
          );
        })
    }
  </section>
</PageLayout>

<style>
  :global(h2),
  :global(h1) {
    margin-bottom: 0;
  }
  section {
    display: flex;
    flex-direction: column;
    gap: 20px;
  }
  ul {
    display: flex;
    gap: 10px;
    list-style: none;
    justify-content: center;
    flex-wrap: wrap;
    margin-block: 30px;
  }
  img {
    width: 55px;
    height: 55px;
    border: 3px solid var(--terminal-dark);
    border-radius: 10px;
  }
  a:hover img {
    border: 3px solid var(--fujo-red);
    cursor: pointer;
    transform: scale(1.5);
  }
</style>
