---
import { getCollection } from "astro:content";
import PageLayout from "../../layouts/PageLayout.astro";
import TeamMemberCard from "../../components/TeamMemberCard.astro";

const team = await getCollection("team");

const PROJECTS: Record<string, any> = {};

team.forEach((member) => {
  for (const project in member.data.roles) {
    if (!PROJECTS[project]) {
      PROJECTS[project] = {};
      PROJECTS[project].members = [];
    }
    if (member.data.roles[project].length > 0) {
      PROJECTS[project].members.push(member);
    }
  }
});

const projectsArray = Object.keys(PROJECTS).map((proj) => ({
  name: proj,
  url: proj.replace(/\s/g, "-").toLowerCase(),
  members: PROJECTS[proj].members,
}));
---

<PageLayout pageTitle="The Fujoshi Guide to Web Development â€“ Our team">
  <h1><a href="/team">Our team</a></h1>
  <div class="tabs">
    {
      projectsArray.map((project, index) => {
        // Exclude from members with card people that have exclusively done beta reading
        const membersWithCard = project.members.filter(
          (member) =>
            member.data.roles[project.name]?.length !== 1 ||
            member.data.roles[project.name][0] !== "Beta Reader"
        );
        const betaReaders = project.members.filter((member) =>
          member.data.roles[project.name]?.includes("Beta Reader")
        );

        return (
          <>
            <input
              type="radio"
              name="tab"
              id={project.url}
              checked={index === 0}
            />
            <label for={project.url}>{project.name}</label>
            <div class="tab-content" id={`content-${project.url}`}>
              {membersWithCard.map((memberEntry) => {
                return (
                  <TeamMemberCard
                    transition:name="artist"
                    transition:animate="slide"
                    transition:persist
                    memberId={memberEntry.id}
                    name={memberEntry.data.name}
                    avatar={memberEntry.data.avatar}
                    roles={memberEntry.data.roles}
                    project={project.name}
                    contacts={memberEntry.data.contacts}
                  />
                );
              })}
              {betaReaders.length > 0 && (
                <div class="beta-readers">
                  <h2>...and our heroic beta readers:</h2>
                  {betaReaders.map((reader) => reader.data.name).join(", ")}
                </div>
              )}
            </div>
          </>
        );
      })
    }
  </div>
</PageLayout>
<style>
  :global(h1) {
    margin-bottom: 0;
  }
  .tabs {
    display: flex;
    flex-wrap: wrap;
    margin: 0 auto;
    justify-content: center;
    align-items: center;
  }

  .tabs label {
    background: var(--fujo-pink);
    color: var(--fujo-cream);
    cursor: pointer;
    display: block;
    margin: 0.3rem;
    font-weight: 700;
    padding: 0.5rem 1rem;
    transition: background ease 0.3s;
    width: auto;
    order: 1;
  }
  .tabs .tab-content {
    display: none;
    margin-top: 1rem;
    padding: 0 1rem;
    order: 99;
  }

  .tabs input[type="radio"] {
    display: none;
  }

  .tabs input[type="radio"]:checked + label {
    background: var(--fujo-red);
    color: var(--fujo-cream);
  }

  .tabs input[type="radio"]:checked + label + .tab-content {
    display: block;
  }

  .beta-readers {
    text-align: center;
    margin: 0 auto;
    margin-top: 40px;
    font-size: 1.17em;
  }
</style>
